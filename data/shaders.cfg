{
    instances: [{
        name: "water_distort",
        vertex: "
            #version 120
            uniform mat4 u_anura_mvp_matrix;
            uniform float u_anura_cycle;
            uniform vec4 u_anura_sprite_area;
            uniform vec4 u_anura_draw_area;
            attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}           
        ",        
        fragment: "
            uniform sampler2D u_anura_tex_map;
            uniform mat4 u_anura_mvp_matrix;
            uniform float u_anura_cycle;
            uniform vec4 u_anura_sprite_area;
            uniform vec4 u_anura_draw_area;
			uniform float u_intensity;
			uniform vec4 u_water_area[2];
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				vec2 texcoord = v_texcoord;
				
				for(int n = 0; n != 2; ++n) {
					if(u_water_area[n][0] >= u_water_area[n][2]) {
						break;
					}

					float left = max(u_anura_draw_area[0], u_water_area[n][0]);
					float top = max(u_anura_draw_area[1], u_water_area[n][1]);
					float right = min(u_anura_draw_area[2], u_water_area[n][2]);
					float bottom = min(u_anura_draw_area[3], u_water_area[n][3]);
					if(v_vertex.x > left
					   && v_vertex.y > top
					   && v_vertex.x < right 
					   && v_vertex.y < bottom){
						float falloff_ratio = min(min(v_vertex.x - left, right - v_vertex.x)/40.0,1.0);
						texcoord.x = texcoord.x + falloff_ratio*sin((u_anura_draw_area[0] + v_vertex.x)*0.02 + u_anura_cycle/20.0)/300.0;
					}
				}
				gl_FragColor = texture2D(u_anura_tex_map, texcoord);
			}
        ",
        attributes: {
            texcoord: "a_anura_texcoord",
            position: "a_anura_vertex",
        },
    }, {
        name: "blur1",
        vertex: "
uniform mat4 u_mvp_matrix;
attribute vec2 position;
attribute vec4 inputTextureCoordinate;
 
uniform float texelWidthOffset;
uniform float texelHeightOffset;
 
varying vec2 blurCoordinates[5];
 
void main()
{
	gl_Position = u_mvp_matrix * vec4(position, 0.0, 1.0);
 
	vec2 singleStepOffset = vec2(texelWidthOffset, texelHeightOffset);
	blurCoordinates[0] = inputTextureCoordinate.xy;
	blurCoordinates[1] = inputTextureCoordinate.xy + singleStepOffset * 1.407333;
	blurCoordinates[2] = inputTextureCoordinate.xy - singleStepOffset * 1.407333;
	blurCoordinates[3] = inputTextureCoordinate.xy + singleStepOffset * 3.294215;
	blurCoordinates[4] = inputTextureCoordinate.xy - singleStepOffset * 3.294215;
}        
        ",
        fragment: "
uniform sampler2D inputImageTexture;

varying highp vec2 blurCoordinates[5];
 
void main()
{
	lowp vec4 sum = vec4(0.0);
	sum += texture2D(inputImageTexture, blurCoordinates[0]) * 0.204164;
	sum += texture2D(inputImageTexture, blurCoordinates[1]) * 0.304005;
	sum += texture2D(inputImageTexture, blurCoordinates[2]) * 0.304005;
	sum += texture2D(inputImageTexture, blurCoordinates[3]) * 0.093913;
	sum += texture2D(inputImageTexture, blurCoordinates[4]) * 0.093913;
	gl_FragColor = sum;
}       
        ",
        uniforms: {
            "mvp_matrix": "u_mvp_matrix",
            "tex_map": "inputImageTexture",
        },
        attributes: {
            "position": "position",
            "texcoord": "inputTextureCoordinate",
        },
    }, {
        name: "blur2",
		vertex: "
uniform mat4 mvp_matrix;
uniform float texel_width_offset;
uniform float texel_height_offset;
attribute vec2 position;
attribute vec2 texcoord;
varying vec2 v_texcoords;

void main()
{
    gl_Position = mvp_matrix * vec4(position, 0.0, 1.0);
    v_texcoords = texcoord;
}
		",
		fragment: "
#version 120
uniform sampler2D tex_map;
varying vec2 v_texcoords;
uniform float texel_width_offset;
uniform float texel_height_offset;
uniform float gaussian[15];

void main()
{
    vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 step_offset = vec2(texel_width_offset, texel_height_offset);
    for(int index = 0; index < 15; ++index) {
        sum += texture2D(tex_map, v_texcoords + step_offset * (index - 7)) * gaussian[index];
    }
    gl_FragColor = sum;
}
		",
    
    }]
}
