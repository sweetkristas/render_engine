{
    instances: [{
        name: "water_distort",
        vertex: "
            #version 150
            layout(std140) uniform anura_data {
                sampler2D u_anura_tex_map;
                mat4 u_anura_mvp_matrix;
                float u_anura_cycle;
                vec4 u_anura_sprite_area;
                vec4 u_anura_draw_area;
            }
            attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}           
        ",        
        fragment: "
            #version 150
            layout(std140) uniform anura_data {
                sampler2D u_anura_tex_map;
                mat4 u_anura_mvp_matrix;
                float u_anura_cycle;
                vec4 u_anura_sprite_area;
                vec4 u_anura_draw_area;
            }
			uniform float u_intensity;
			uniform vec4 u_water_area[2];
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				vec2 texcoord = v_texcoord;
				
				for(int n = 0; n != 2; ++n) {
					if(u_water_area[n][0] >= u_water_area[n][2]) {
						break;
					}

					float left = max(u_anura_draw_area[0], u_water_area[n][0]);
					float top = max(u_anura_draw_area[1], u_water_area[n][1]);
					float right = min(u_anura_draw_area[2], u_water_area[n][2]);
					float bottom = min(u_anura_draw_area[3], u_water_area[n][3]);
					if(v_vertex.x > left
					   && v_vertex.y > top
					   && v_vertex.x < right 
					   && v_vertex.y < bottom){
						float falloff_ratio = min(min(v_vertex.x - left, right - v_vertex.x)/40.0,1.0);
						texcoord.x = texcoord.x + falloff_ratio*sin((u_anura_draw_area[0] + v_vertex.x)*0.02 + u_anura_cycle/20.0)/300.0;
					}
				}
				gl_FragColor = texture2D(u_anura_tex_map, texcoord);
			}
        ",
    }]
}
